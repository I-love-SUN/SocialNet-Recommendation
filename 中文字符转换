#include<windows.h>
#include<iostream>
#include<string>

using namespace std;
wchar_t* MBCS2Unicode(wchar_t * buff, const char * str){
    wchar_t * wp = buff;
    char * p = (char *)str;
    while (*p){
        if (*p & 0x80){
            *wp = *(wchar_t *)p;
            p++;
        }
        else {
            *wp = (wchar_t)*p;
        }
        wp++;
        p++;
    }
    *wp = 0x0000;
    return buff;
}
char * Unicode2MBCS(char * buff, const wchar_t * str){
    wchar_t * wp = (wchar_t *)str;
    char * p = buff, *tmp;
    while (*wp) {
        tmp = (char *)wp;
        if (*wp & 0xFF00) {
            *p = *tmp;
            p++; tmp++;
            *p = *tmp;
            p++;
        }
        else {
            *p = *tmp;
            p++;
        }
        wp++;
    }
    *p = 0x00;
    return buff;
}
wstring str2wstr(string str){
    size_t len = str.size();
    wchar_t * b = (wchar_t *)malloc((len + 1) * sizeof(wchar_t));
    MBCS2Unicode(b, str.c_str());
    wstring r(b);
    free(b);
    return r;
}
int wputs(const wchar_t * wstr);
int wputs(wstring wstr){
    wputs(wstr.c_str());
    return 0;
}
int wputs(const wchar_t * wstr){
    int len = wcslen(wstr);
    char * buff = (char *)malloc((len * 2 + 1) * sizeof(char));
    Unicode2MBCS(buff, wstr);
    printf("%s", buff);
    free(buff);
    return 0;
}
string wstr2str(wstring wstr){
    size_t len = wstr.size();
    char * b = (char *)malloc((2 * len + 1) * sizeof(char));
    Unicode2MBCS(b, wstr.c_str());
    string r(b);
    free(b);
    return r;
}

wstring AsciiToUnicode(const string& str) {  
    // 预算-缓冲区中宽字节的长度    
    int unicodeLen = MultiByteToWideChar(CP_ACP, 0, str.c_str(), -1, NULL, 0);  
    // 给指向缓冲区的指针变量分配内存    
    wchar_t *pUnicode = (wchar_t*)malloc(sizeof(wchar_t)*unicodeLen);  
    // 开始向缓冲区转换字节    
    MultiByteToWideChar(CP_ACP, 0, str.c_str(), -1, pUnicode, unicodeLen);  
    wstring ret_str = pUnicode;  
    free(pUnicode);  
    return ret_str;  
}  
string UnicodeToAscii(const wstring& wstr) {  
    // 预算-缓冲区中多字节的长度    
    int ansiiLen = WideCharToMultiByte(CP_ACP, 0, wstr.c_str(), -1, NULL, 0, NULL, NULL);  
    // 给指向缓冲区的指针变量分配内存    
    char *pAssii = (char*)malloc(sizeof(char)*ansiiLen);  
    // 开始向缓冲区转换字节    
    WideCharToMultiByte(CP_ACP, 0, wstr.c_str(), -1, pAssii, ansiiLen, NULL, NULL);  
    string ret_str = pAssii;  
    free(pAssii);  
    return ret_str;  
}  
wstring Utf8ToUnicode(const string& str) {  
    // 预算-缓冲区中宽字节的长度    
    int unicodeLen = MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, NULL, 0);  
    // 给指向缓冲区的指针变量分配内存    
    wchar_t *pUnicode = (wchar_t*)malloc(sizeof(wchar_t)*unicodeLen);  
    // 开始向缓冲区转换字节    
    MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, pUnicode, unicodeLen);  
    wstring ret_str = pUnicode;  
    free(pUnicode);  
    return ret_str;  
}  

//string Utf8ToAnsi(const char* su8){
//	int wcsLen = ::MultiByteToWideChar(CP_UTF8, NULL, su8, strlen(su8), NULL, 0);
//	wchar_t* wszMultiByte = new wchar_t[wcsLen+1];
//	::MultiByteToWideChar(CP_UTF8, NULL, su8, strlen(su8), wszMultiByte, wcsLen);
//	
//	int ansiLen = ::MultiByteToWideChar(CP_UTF8, NULL, wszMultiByte, wcsLen(wszMultiByte), NULL, 0, NULL, NULL);
//	char* szAnsi = new char[ansiLen + 1];
//	szAnsi[ansiLen] = '\0';
//	::MultiByteToWideChar(CP_UTF8, NULL, wszMultiByte, wcsLen(wszMultiByte), szAnsi, ansiLen, NULL, NULL);
//	string = szAnsi;
//	delete[] szAnsi;
//	delete[] wszMultiByte;
//	
//	return s;
//}
string UnicodeToUtf8(const wstring& wstr) {  
    // 预算-缓冲区中多字节的长度    
    int ansiiLen = WideCharToMultiByte(CP_UTF8, 0, wstr.c_str(), -1, NULL, 0, NULL, NULL);  
    // 给指向缓冲区的指针变量分配内存    
    char *pAssii = (char*)malloc(sizeof(char)*ansiiLen);  
    // 开始向缓冲区转换字节    
    WideCharToMultiByte(CP_UTF8, 0, wstr.c_str(), -1, pAssii, ansiiLen, NULL, NULL);  
    string ret_str = pAssii;  
    free(pAssii);  
    return ret_str;  
}  
//CStringW    AsciiToUnicode_CSTR(const CStringA& str) {  
//    return AsciiToUnicode(LPCSTR(str)).c_str();  
//}  
//CStringA    UnicodeToAscii_CSTR(const CStringW& wstr) {  
//    return UnicodeToAscii(LPCWSTR(wstr)).c_str();  
//}  
//// UTF8与Unicode互转  
//CStringW    Utf8ToUnicode_CSTR(const CStringA& str) {  
//    return Utf8ToUnicode(LPCSTR(str)).c_str();  
//}  
//CStringA    UnicodeToUtf8_CSTR(const CStringW& wstr) {  
//    return UnicodeToUtf8(LPCWSTR(wstr)).c_str();  
//}  
//// ASCII与UTF8互转  
//CStringA    AsciiToUtf8_CSTR(const CStringA& str) {  
//    return UnicodeToUtf8_CSTR(AsciiToUnicode_CSTR(str));  
//}  
//CStringA    Utf8ToAscii_CSTR(const CStringA& str) {  
//    return UnicodeToAscii_CSTR(Utf8ToUnicode_CSTR(str));  
//}  
// 



//int main(){
//    //输入层：接收char*输入，并将其转换为wchar*
//    string input = "今天你在武汉！！";
//    string temp = "在";
//    //逻辑层在whcar*或wstring的基础上进行字符串操作，此时操作最小单位为中文字符，不会再有乱码。
//    wstring buff = str2wstr(input);
//    wstring temp_buff = str2wstr(temp);
//    cout << "input的中文个数:"<<wcslen(buff.c_str()) << "   temp的中文个数:" << wcslen(temp_buff.c_str()) << endl;
//    cout << "判断input第三个是否是'在':" << (buff[3] == temp_buff[0]) << endl;;
//    //输出层将wchar*的结果再次转换为char*，返回给外部
//    wputs(buff);
//    return 0;
//}
